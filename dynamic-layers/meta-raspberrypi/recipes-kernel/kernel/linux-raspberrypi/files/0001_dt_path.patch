diff --git a/arch/arm/boot/dts/broadcom/bcm2711-rpi-4-b.dts b/arch/arm/boot/dts/broadcom/bcm2711-rpi-4-b.dts
index d3a3a1e4d4c6..fa673ef55482 100644
--- a/arch/arm/boot/dts/broadcom/bcm2711-rpi-4-b.dts
+++ b/arch/arm/boot/dts/broadcom/bcm2711-rpi-4-b.dts
@@ -293,20 +293,27 @@ &spi0 {
 	pinctrl-0 = <&spi0_pins &spi0_cs_pins>;
 	cs-gpios = <&gpio 8 1>, <&gpio 7 1>;
 
-	spidev0: spidev@0{
-		compatible = "spidev";
-		reg = <0>;	/* CE0 */
-		#address-cells = <1>;
-		#size-cells = <0>;
-		spi-max-frequency = <125000000>;
-	};
-
-	spidev1: spidev@1{
-		compatible = "spidev";
-		reg = <1>;	/* CE1 */
-		#address-cells = <1>;
-		#size-cells = <0>;
-		spi-max-frequency = <125000000>;
+	// spidev0: spidev@0{
+	// 	compatible = "spidev";
+	// 	reg = <0>;	/* CE0 */
+	// 	#address-cells = <1>;
+	// 	#size-cells = <0>;
+	// 	spi-max-frequency = <125000000>;
+	// };
+
+	// spidev1: spidev@1{
+	// 	compatible = "spidev";
+	// 	reg = <1>;	/* CE1 */
+	// 	#address-cells = <1>;
+	// 	#size-cells = <0>;
+	// 	spi-max-frequency = <125000000>;
+	// };
+
+	coproc_comm1: coproc_coomm@0 {
+		compatible = "custom,cproc";
+		reg = <0>; // Chip select line (CS0)
+        spi-max-frequency = <10000000>; // 1 MHz
+		status = "okay";
 	};
 };
 
diff --git a/arch/arm64/configs/bcm2711_defconfig b/arch/arm64/configs/bcm2711_defconfig
index 6ac8c83f6842..ba7aa9002667 100644
--- a/arch/arm64/configs/bcm2711_defconfig
+++ b/arch/arm64/configs/bcm2711_defconfig
@@ -1668,5 +1668,6 @@ CONFIG_FUNCTION_PROFILER=y
 CONFIG_STACK_TRACER=y
 CONFIG_SCHED_TRACER=y
 CONFIG_BLK_DEV_IO_TRACE=y
+CONFIG_CUSTOM_CPROC=m
 # CONFIG_UPROBE_EVENTS is not set
 # CONFIG_STRICT_DEVMEM is not set
# diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
# index a76c6c9eca45..900aa95b2303 100644
# --- a/drivers/misc/Kconfig
# +++ b/drivers/misc/Kconfig
# @@ -587,4 +587,5 @@ source "drivers/misc/cardreader/Kconfig"
#  source "drivers/misc/uacce/Kconfig"
#  source "drivers/misc/pvpanic/Kconfig"
#  source "drivers/misc/mchp_pci1xxxx/Kconfig"
# +source "drivers/misc/realtime-comm/Kconfig"
#  endmenu
# diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
# index 02bc5669370e..49482050621e 100644
# --- a/drivers/misc/Makefile
# +++ b/drivers/misc/Makefile
# @@ -68,3 +68,4 @@ obj-$(CONFIG_TMR_MANAGER)      += xilinx_tmr_manager.o
#  obj-$(CONFIG_TMR_INJECT)	+= xilinx_tmr_inject.o
#  obj-$(CONFIG_TPS6594_ESM)	+= tps6594-esm.o
#  obj-$(CONFIG_TPS6594_PFSM)	+= tps6594-pfsm.o
# +obj-$(CONFIG_CUSTOM_CPROC)	+= realtime-comm/
# diff --git a/drivers/misc/realtime-comm/Kconfig b/drivers/misc/realtime-comm/Kconfig
# new file mode 100644
# index 000000000000..ee235a1ed567
# --- /dev/null
# +++ b/drivers/misc/realtime-comm/Kconfig
# @@ -0,0 +1,8 @@
# +config CUSTOM_CPROC
# +	tristate "Support for Custom Coprocessor Communication"
# +	help
# +	  Support ESM (Error Signal Monitor) on TPS6594 PMIC devices.
# +	  ESM is used typically to reboot the board in error condition.
# +
# +	  This driver can also be built as a module.  If so, the module
# +	  will be called tps6594-esm.
# diff --git a/drivers/misc/realtime-comm/Makefile b/drivers/misc/realtime-comm/Makefile
# new file mode 100644
# index 000000000000..723751b2157b
# --- /dev/null
# +++ b/drivers/misc/realtime-comm/Makefile
# @@ -0,0 +1,13 @@
# +obj-$(CONFIG_CUSTOM_CPROC) += cproc.o
# +
# +all:
# +	$(MAKE) -C $(KERNEL_SRC) M=$(PWD) modules
# +
# +clean:
# +	$(MAKE) -C $(KERNEL_SRC) M=$(PWD) clean
# +
# +install:
# +	$(MAKE) -C $(KERNEL_SRC) M=$(PWD) modules_install
# +
# +modules_install:
# +	$(MAKE) -C $(KERNEL_SRC) M=$(PWD) modules_install
# \ No newline at end of file
# diff --git a/drivers/misc/realtime-comm/cproc.c b/drivers/misc/realtime-comm/cproc.c
# new file mode 100644
# index 000000000000..b870511751e7
# --- /dev/null
# +++ b/drivers/misc/realtime-comm/cproc.c
# @@ -0,0 +1,96 @@
# +#include <linux/module.h>
# +#include <linux/kernel.h>
# +#include <linux/spi/spi.h>
# +#include <linux/of.h>
# +#include <linux/sysfs.h>
# +#include <linux/kobject.h>
# +#include <linux/fs.h>
# +
# +#define DRIVER_NAME "spi_sysfs_dt_example"
# +#define DEVICE_NAME "spi_device"
# +
# +// Buffer to store received data
# +static char spi_data[64];
# +static struct kobject *kobj;
# +
# +// Sysfs attribute to read SPI data
# +static ssize_t spi_data_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf) {
# +    return sprintf(buf, "%s\n", spi_data);
# +}
# +
# +static struct kobj_attribute spi_data_attr = __ATTR(spi_data, 0444, spi_data_show, NULL);
# +
# +static int spi_dt_probe(struct spi_device *spi) {
# +    int ret;
# +    struct spi_message msg;
# +    struct spi_transfer transfer = {
# +        .tx_buf = NULL,
# +        .rx_buf = spi_data,
# +        .len = sizeof(spi_data),
# +    };
# +    printk("I am here 1");
# +    // Create a sysfs entry
# +    kobj = kobject_create_and_add(DEVICE_NAME, kernel_kobj);
# +    if (!kobj) {
# +        dev_err(&spi->dev, "Failed to create sysfs directory\n");
# +        return -ENOMEM;
# +    }
# +
# +    ret = sysfs_create_file(kobj, &spi_data_attr.attr);
# +    if (ret) {
# +        kobject_put(kobj);
# +        dev_err(&spi->dev, "Failed to create sysfs file\n");
# +        return ret;
# +    }
# +
# +    printk("I am here 1");
# +    // Perform SPI transfer (this can be done in a loop, or in response to an event)
# +    spi_message_init(&msg);
# +    spi_message_add_tail(&transfer, &msg);
# +    ret = spi_sync(spi, &msg);
# +
# +    if (ret < 0) {
# +        dev_err(&spi->dev, "SPI transfer failed\n");
# +        return ret;
# +    }
# +
# +    printk("I am here 1");
# +    dev_info(&spi->dev, "SPI device probed, data: %s\n", spi_data);
# +    return 0;
# +}
# +
# +static void  spi_dt_remove(struct spi_device *spi) {
# +    sysfs_remove_file(kobj, &spi_data_attr.attr);
# +    kobject_put(kobj);
# +    dev_info(&spi->dev, "SPI device removed\n");
# +}
# +
# +// SPI device ID table for non-Device Tree platforms
# +static const struct spi_device_id spi_ids[] = {
# +    { "cproc", 0 },
# +    { }
# +};
# +MODULE_DEVICE_TABLE(spi, spi_ids);
# +
# +static const struct of_device_id spi_dt_ids[] = {
# +    { .compatible = "custom,cproc" },
# +    { }
# +};
# +MODULE_DEVICE_TABLE(of, spi_dt_ids);
# +
# +static struct spi_driver spi_dt_driver = {
# +    .driver = {
# +        .name = DRIVER_NAME,
# +        .of_match_table = spi_dt_ids,
# +    },
# +    .id_table = spi_ids,              // For non-Device Tree platforms
# +    .probe = spi_dt_probe,
# +    .remove = spi_dt_remove,
# +};
# +
# +module_spi_driver(spi_dt_driver);
# +
# +MODULE_LICENSE("GPL");
# +MODULE_AUTHOR("Your Name");
# +MODULE_DESCRIPTION("SPI driver with Device Tree support and sysfs interface");
# +MODULE_VERSION("0.1");
